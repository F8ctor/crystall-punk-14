using System.Numerics;
using Content.Shared._CP14.Skill.Components;
using Content.Shared._CP14.Skill.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Prototypes;

namespace Content.Client._CP14.Skill.Ui;

[GenerateTypedNameReferences]
public sealed partial class CP14SkillTreeGraphControl : BoxContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;

    private readonly CP14SkillTreePrototype? _tree;

    private Entity<CP14SkillStorageComponent>? _player;

    private IEnumerable<CP14SkillPrototype> _allSkills;

    private CP14SkillPrototype? _hoveredNode;
    private CP14SkillPrototype? _selectedNode;

    public event Action<CP14SkillPrototype>? OnNodeSelected;

    public CP14SkillTreeGraphControl()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _allSkills = _proto.EnumeratePrototypes<CP14SkillPrototype>();
    }

    public void SetPlayer(Entity<CP14SkillStorageComponent>? player)
    {
        _player = player;
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        base.Draw(handle);

        _hoveredNode = null;
        if (_player == null /*|| _tree == null*/)
        {
            return;
        }

        var cursor = (UserInterfaceManager.MousePositionScaled.Position * UIScale) - GlobalPixelPosition;

        var x = 0;
        foreach (var skill in _player.Value.Comp.Skills)
        {
            if (!_proto.TryIndex(skill, out var indexedSkill))
                continue;

            //if (skill.Tree != _tree)
            //{
            //    continue;
            //}

            handle.DrawTexture(indexedSkill.Icon.Frame0(), new Vector2(x * 10, x * 10), Color.White);
            x += 1;
        }
    }
}
